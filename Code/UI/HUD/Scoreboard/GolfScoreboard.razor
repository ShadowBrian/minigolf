@namespace Facepunch.Minigolf.UI
@inherits Sandbox.UI.Panel

<root>
@* 	<div class="timer">
		@{
			if ( !string.IsNullOrEmpty( TimerTimeLeft ) || !string.IsNullOrEmpty( TimerTimeUntil ) )
			{
				<div>
					<text>@TimerTimeLeft</text>
				</div>
				<div>
					<text>@TimerTimeUntil</text>
				</div>
			}
		}
	</div> *@

    @{
        var orderedHoles = Scene.GetAllComponents<Hole>().OrderBy( x => x.Number );
    }

	<div class="scoreboard-container">
		<div class="scoreboard-title">
            <img src="/ui/minigolf_logo.png" class="logo" />
		</div>
		<div class="scoreboard">
			<div class="headers">
				<div class="hole">
					<text>Hole</text>
					<div class="holes">
						<div>
                            @foreach ( var hole in orderedHoles )
                            {
                                <label class=@( hole == GameManager.Instance.CurrentHole ? "active" : "" )>@hole.Number</label>
                            }
						</div>
						<text class="total">Total</text>
					</div>
				</div>
				<div class="par">
					<text>Par</text>
					<div class="holes">
						<div>
                            @foreach ( var hole in orderedHoles )
                            {
                                <label class=@( hole == GameManager.Instance.CurrentHole ? "active" : "" )>@hole.Par</label>
                            }
						</div>
						<text class="total">@(Scene.GetAllComponents<Hole>().Sum( x => x.Par ))</text>
					</div>
				</div>
			</div>
			<div class="players">
				@foreach ( var client in Connection.All.OrderByDescending( x => x.GetBall().GetTotalPar() ) )
				{
					<ScoreboardPlayer Client=@client />
				}
			</div>
		</div>
		<div class="scoreboard-info">
			<div>
				<text class="subtext">Players: </text>
				<text>@Connection.All.Count()</text>
			</div>
			<div>
				<text class="subtext">Course: </text>
				<text>Unknown</text>
			</div>
		</div>
	</div>
</root>

@code {
	static GolfScoreboard Current;
	public bool ForceOpen;

	public GolfScoreboard()
	{
		Current = this;
	}

	public override void Tick()
	{
		if ( ForceOpen )
			SetClass( "open", true );
		else
			SetClass( "open", Input.Down( "Score" ) );
	}

	protected override int BuildHash()
	{
		// var clients = Game.Clients.HashCombine( c => HashCode.Combine( c.SteamId, c.GetTotalPar() ) );
		// var mapIdent = Sandbox.Game.Server.MapIdent;
		// var holeCount = MinigolfGame.Current.Course.Holes.Count;
		// var currentHole = MinigolfGame.Current.Course.CurrentHoleIndex;

		// return HashCode.Combine( clients, mapIdent, holeCount, currentHole, TimerTimeLeft.GetHashCode(), TimerTimeUntil.GetHashCode() );

        return HashCode.Combine( Time.Now );
	}
}
